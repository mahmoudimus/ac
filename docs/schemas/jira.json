{"properties":{"baseUrl":{"type":"string"},"authentication":{"properties":{"sharedKey":{"type":"string","description":"Either the JWT shared secret ot the OAUTH publickKey depending on authentication type."},"type":{"enumList":["oauth","jwt","none"],"type":"string","description":"The type of authentication to use. Defaults to jwt."}},"id":"authenticationBean","type":"object","description":"Defines the authentication type to use when signing requests between the host application and the connect add on.\n The authentication type can be eithe jwt or oauth. If the type is not supplied it will default to jwt.\n"},"lifecycle":{"properties":{"enabled":{"type":"string"},"installed":{"type":"string"},"uninstalled":{"type":"string"},"disabled":{"type":"string"}},"id":"lifecycleBean","type":"object","description":"Allows an addon to register callbacks for plugin lifecycle events.\n"},"vendor":{"properties":{"name":{"type":"string"},"url":{"type":"string"}},"id":"vendorBean","type":"object"},"description":{"type":"string"},"name":{"type":"string","description":"the name of the addon"},"links":{"additionalProperties":true},"capabilities":{"properties":{"webhooks":{"items":{"properties":{"event":{"type":"string","description":"Specifies the named event you would like to listen to (e.g., \"enabled\", \"jira:issue_created\", etc.)"},"url":{"type":"string","description":"Specifies your add-on\u0027s POST webhook handler URL. This property has to be a relative URL."}},"id":"webHookCapabilityBean","type":"object","description":"A webhook is a standard mechanism for implementing HTTP callbacks. Atlassian OnDemand applications can execute\n webhooks that your add-ons can use to be notified of certain events that happen in JIRA or Confluence.\n \u003cp/\u003e\n Just to give you an idea of how you can use them in add-ons, here are a few sample webhook events:\n \u003cp/\u003e\n \u003cul\u003e\n \u003cli\u003eWhen an add-on is enabled or disabled\u003c/li\u003e\n \u003cli\u003eWhen an issue is created or closed in JIRA\u003c/li\u003e\n \u003cli\u003eWhen a page is created or updated in Confluence\u003c/li\u003e\n \u003c/ul\u003e\n \u003cp/\u003e\n While some webhooks are specific to the Atlassian application, JIRA or Confluence, others are common to all\n applications. This type includes, for example, the webhooks that generate notifications when the add-on is enabled.\n \u003cp/\u003e\n Most add-ons should implement the remote_plugin_enabled webhook. The Atlassian application uses this event to supply\n its public key to the add-on. The Authenticating with OAuth page shows an example of how to use this webhook.\n \u003cp/\u003e\n \u003ch3\u003eHandling the webhook event\u003c/h3\u003e\n To receive webhook events, your add-on needs to include the webhook module declaration in its JSON descriptor. The\n declaration indicates the relative URL of the local resource at which it will receive the notification. In other\n words, the Atlassian application will send an HTTP POST to this resource in response to an application event. The\n add-on code that handles the POST should process any information passed in the body of the message, as appropriate.\n Each webhook POST sent to the add-on will also include the authentication headers that allow the add-on to\n validate the authenticity of that request.\n \u003cp/\u003e\n \u003ch4\u003eSample webhooks JSON block\u003c/h4\u003e\n \u003cpre\u003e\n {@code\n {\n     \"webhooks\": [\n         {\n             \"event\": \"jira:issue_created\",\n             \"url\": \"/issue-created\"\n         },\n         ...\n         {\n             \"event\": \"jira:issue_updated\",\n             \"url\": \"/issue-updated\"\n         }\n     ]\n }\n }\n \u003c/pre\u003e\n \u003ch3\u003eWebhook event types\u003c/h3\u003e\n To find out what webhooks are available for each application, the best place to look is in the Interactive\n Descriptor Guide (\u003ca href\u003d\"https://developer.atlassian.com/connect/api/jira\"\u003eJIRA\u003c/a\u003e or\n \u003ca href\u003d\"https://developer.atlassian.com/connect/api/confluence\"\u003eConfluence\u003c/a\u003e).\n \u003cp/\u003e\n \u003ch3\u003eInspecting webhook contents\u003c/h3\u003e\n Each type of webhook event includes information specific to that event in the body content of the POST message. The\n add-on resource that listens for webhook posts should receive and process the content as appropriate for the add-on.\n To understand what type of content each webhook generates, you can use the webhook inspector tool.\n \u003cp/\u003e\n The \u003ca href\u003d\"https://bitbucket.org/atlassianlabs/webhook-inspector\"\u003eWebhook Inspector\u003c/a\u003e is a\n \u003ca href\u003d\"https://bitbucket.org/atlassian/atlassian-connect-express\"\u003eatlassian-connect-express\u003c/a\u003e Connect add-on\n that you can install in your development environment to inspect the content of event messages. The Webhook Inspector\n subscribes and generates each webhook event type available on the running instance of the Atlassian application,\n and prints the body posted by the instance to the console screen.\n"},"type":"array"},"jiraVersionTabPanels":{"items":{"properties":{"weight":{"type":"integer"},"url":{"type":"string"}},"id":"connectTabPanelCapabilityBean","type":"object"},"type":"array"},"jiraProjectAdminTabPanels":{"items":{"properties":{"location":{"type":"string"}},"id":"connectProjectAdminTabPanelCapabilityBean","type":"object","description":"Capabilities bean for Jira ProjectAdmin Tab Pages. The capability JSON looks like\n \u003cp\u003e\n \u003cpre\u003e\n \"jiraProjectAdminTabPanels\": [{\n   \"name\": {\n     \"value\": \"My ProjectAdmin Tab\",\n     \"i18n\": \"my.tab\"\n   },\n   \"url\": \"/my-general-page\",\n   \"weight\": 100\n   \"location\" : \"projectgroup4\"\n }]\n \u003c/pre\u003e\n \u003c/p\u003e\n"},"type":"array"},"jiraProjectTabPanels":{"items":{"properties":{"weight":{"type":"integer"},"url":{"type":"string"}},"id":"connectTabPanelCapabilityBean","type":"object"},"type":"array"},"webPanels":{"items":{"properties":{"weight":{"type":"integer","description":"Determines the order in which web panels appear. Web panels are displayed top to bottom or left to right in\n  order of ascending weight. The \"lightest\" weight is displayed first, while the \"heaviest\" weights sink to the\n  bottom. The weight values for most panels start from 100, and the weights for the links\n  generally start from 10. The weight is incremented by 10 for each in sequence to leave room for custom\n  panels."},"location":{"type":"string","description":"Location in the application interface for this panel."},"layout":{"properties":{"height":{"type":"string"},"width":{"type":"string"}},"id":"webPanelLayout","type":"object","description":"The width and height of the web panel on the page."},"url":{"type":"string","description":"The URL of the add-on resource that provides the web panel content."}},"id":"webPanelCapabilityBean","type":"object","description":"Adds a panel (or section) to a page in the Atlassian application. Panels let you present related information and\n controls in the application interface as a group. For example, the existing \"People\" panel in JIRA issue view\n shows the assignee, reporter, and similar information for the issue.\n"},"type":"array"},"generalPages":{"items":{"properties":{"icon":{"properties":{"height":{"type":"integer","description":"The height in pixels of the icon image."},"width":{"type":"integer","description":"The width in pixels of the icon image."},"url":{"type":"string","description":"The URL of the icon. Your icon needs to be hosted remotely at a web-accessible location. You can specify the\n URL as an absolute URL or relative to the add-on\u0027s base URL."}},"id":"iconBean","type":"object","description":"An optional icon to display with the link text or as the link, specified by URL to its hosted location.\n  You can specify a particular width and height for the icon. Most link icons in Atlassian applications\n  are 16 by 16 pixels."},"weight":{"type":"integer","description":"Determines the order in which the page\u0027s link appears in the menu or list.\n\n The \"lightest\" weight (i.e., lowest number) appears first, rising relative to other items,\n while the \"heaviest\" weights sink to the bottom of the menu or list.\n\n Built-in web items have weights that are incremented by numbers that leave room for additional\n items, such as by 10 or 100. Be mindful of the weight you choose for your item, so that it appears\n in a sensible order given existing items."},"location":{"type":"string","description":"The location in the application interface where the page\u0027s link should appear. For the Atlassian application\n interface, a location is something like the coordinates on a map. It points to a particular drop-down menu or\n navigation list in the UI.\n\n Places in the Atlassian UI are identified by what are known as \"well-known locations.\"\n For example, the \"system.admin/globalsettings\" location is in the administrative\n menu link on the left side of the Administration Console."},"url":{"type":"string","description":"Specifies the URL targeted by the page. The URL is relative to either the\n  the add-on\u0027s base URL"}},"id":"connectPageCapabilityBean","type":"object","description":"Page modules are UI extension points that add-ons can use to insert content into various areas of the host\n application\u0027s interface. You implement a page module (along with the other type of module you can use with\n Atlassian Connect, webhooks) by declaring it in the add-on descriptor and implementing the add-on code that\n composes it.\n\n Each application has page module types that are specific for it, but there are some common page types as well.\n For instance, both JIRA and Confluence support the general-page and profile-page module, but only JIRA has the\n issue-panel-page.\n\n The page module takes care of integrating the add-on content into the application for you. The add-on content\n automatically gets the page styles and decorators from the host application.\n"},"type":"array"},"jiraWorkflowPostFunctions":{"items":{"properties":{"description":{"properties":{"value":{"type":"string"},"i18n":{"type":"string"}},"id":"i18nProperty","type":"object"},"edit":{"properties":{"url":{"type":"string"}},"id":"urlBean","type":"object"},"view":{"properties":{"url":{"type":"string"}},"id":"urlBean","type":"object"},"create":{"properties":{"url":{"type":"string"}},"id":"urlBean","type":"object"},"triggered":{"properties":{"url":{"type":"string"}},"id":"urlBean","type":"object"}},"id":"workflowPostFunctionCapabilityBean","type":"object"},"type":"array"},"jiraIssueTabPanels":{"items":{"properties":{"weight":{"type":"integer"},"url":{"type":"string"}},"id":"connectTabPanelCapabilityBean","type":"object"},"type":"array"},"webItems":{"items":{"properties":{"icon":{"properties":{"height":{"type":"integer","description":"The height in pixels of the icon image."},"width":{"type":"integer","description":"The width in pixels of the icon image."},"url":{"type":"string","description":"The URL of the icon. Your icon needs to be hosted remotely at a web-accessible location. You can specify the\n URL as an absolute URL or relative to the add-on\u0027s base URL."}},"id":"iconBean","type":"object","description":"An optional icon to display with the link text or as the link, specified by URL to its hosted location.\n  You can specify a particular width and height for the icon. Most link icons in Atlassian applications\n  are 16 by 16 pixels."},"styleClasses":{"items":{"type":"string"},"type":"array","description":"Specifies custom styles for the web link target page, if desired. By default, the web item content gets\n styled in the default style of the target application."},"weight":{"type":"integer","description":"Determines the order in which the web item appears in the menu or list.\n\n \u003cp/\u003e\n\n The \"lightest\" weight (i.e., lowest number) appears first, rising relative to other items,\n while the \"heaviest\" weights sink to the bottom of the menu or list.\n\n \u003cp/\u003e\n\n Built-in web items have weights that are incremented by numbers that leave room for additional\n items, such as by 10 or 100. Be mindful of the weight you choose for your item, so that it appears\n in a sensible order given existing items."},"location":{"type":"string","description":"The location in the application interface where the web item should appear. For the Atlassian application\n interface, a location is something like the coordinates on a map. It points to a particular drop-down menu or\n navigation list in the UI.\n\n \u003cp/\u003e\n\n Places in the Atlassian UI are identified by what are known as \"well-known locations.\"\n For example, the \"system.admin/globalsettings\" location is in the administrative\n menu link on the left side of the Administration Console."},"link":{"type":"string","description":"Specifies the URL targeted by the link. The URL can be absolute or relative to either the\n  product URL or the add-on\u0027s base URL, depending on the {@link AddOnUrlContext} parameter."},"context":{"enumList":["addon","product"],"type":"string","description":"The context for the URL parameter, if the URL is specified as a relative (not absolute) URL.\n\n \u003cp/\u003e\n\n  This context can be either \"add-on\", which renders the URL relative to the add-on\u0027s base URL, or\n  \"product\", which renders the URL relative to the product\u0027s base URL."},"dialog":{"type":"boolean","description":"If true, the link opens a modal dialog. Otherwise the link behaves as a regular hyperlink."},"tooltip":{"properties":{"value":{"type":"string"},"i18n":{"type":"string"}},"id":"i18nProperty","type":"object","description":"The internationalised text to be used in the link\u0027s tooltip."}},"id":"webItemCapabilityBean","type":"object","description":"Adds a web item to a specified location in the application interface. A web item is a hyperlink\n that’s inserted into some standard place in the Atlassian application interface, such as the\n administration menu.\n\n \u003cp/\u003e\n\n The form that the link takes can vary depending on the location. For instance, a web item in the header bar\n (with a location section of system.top.navigation.bar) adds a link to the navigation bar across the top of the\n interface. On the other hand, a web item in the opsbar-operation location section in JIRA adds an item to the issue\n operation buttons.\n\n \u003cp/\u003e\n\n A web item link can open a new page in the application or a dialog, depending on your configuration.\n\n \u003cp/\u003e\n\n Web links are a simple and useful way to extend Atlassian applications. If you want to extend an Atlassian\n application and don\u0027t know where to start, a web item may be all you need.\n"},"type":"array"},"jiraComponentTabPanels":{"items":{"properties":{"weight":{"type":"integer"},"url":{"type":"string"}},"id":"connectTabPanelCapabilityBean","type":"object"},"type":"array"}},"id":"capabilityList","type":"object","description":"This class represents the list of modules in the json descriptor.\n Every new module type needs to be added here as a private field and annotated with @CapabilityModuleProvider\n \n The field name will be what appears in the json.\n \n Note: this class does NOT have a builder. Instead the {@link ConnectAddonBean} has a special reflective builder\n that will handle adding beans to the proper fields in this class by name and type.\n You can buy me a beer later for that little trick when you realize you don\u0027t need to keep updating a builder everytime you add a new type here.\n"},"key":{"type":"string","description":"The plugin key for the add on"},"version":{"type":"string"}},"$schema":"http://json-schema.org/draft-04/schema#","id":"connectAddonBean","type":"object","title":"Connect Addon Root Descriptor","description":"The root descriptor for an Atlassian Connect add on\n \n Json Example:\n{\n  \"key\": \"my-addon-key\",\n  \"name\": \"My Connect Addon\",\n  \"version\": \"1.0\",\n  \"description\": \"A connect addon that does something\",\n  \"vendor\": {\n    \"name\": \"My Company\",\n    \"url\": \"http://www.example.com\"\n  },\n  \"links\": {\n    \"self\": \"http://www.example.com/connect/jira\"\n  },\n  \"baseUrl\": \"http://www.example.com/connect/jira\",\n  \"authentication\": {\n    \"type\": \"jwt\"\n  },\n  \"capabilities\": {}\n}"}