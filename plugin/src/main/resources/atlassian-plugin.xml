<atlassian-plugin key="${project.groupId}.${project.artifactId}" name="${project.name}" plugins-version="2">
    <plugin-info>
        <description>${project.description}</description>
        <version>${project.version}</version>
        <vendor name="${project.organization.name}" url="${project.organization.url}" />
    </plugin-info>

    <resource type="i18n" name="i18n" location="com.atlassian.connect.i18n"/>

    <servlet-filter key="iframe-resources" class="com.atlassian.plugin.connect.plugin.iframe.StaticResourcesFilter"
                    location="after-encoding">
        <url-pattern>/atlassian-connect/*</url-pattern>
    </servlet-filter>

    <servlet-filter key="schema-resources" class="com.atlassian.plugin.connect.plugin.capabilities.schema.SchemaFilter"
                    location="after-encoding" weight="90">
        <url-pattern>/atlassian-connect/schema/*</url-pattern>
    </servlet-filter>

    <!-- the 3LA filter needs to run after the JWT filter (to read attributes on the request) and before the ApiScopingFilter (to set the principal) -->
    <servlet-filter key="three-legged-auth-filter" class="com.atlassian.plugin.connect.plugin.threeleggedauth.ThreeLeggedAuthFilter"
            location="after-encoding" weight="10000">
        <url-pattern>/*</url-pattern>
    </servlet-filter>

    <servlet-filter key="api-scoping" class="com.atlassian.plugin.connect.plugin.scopes.ApiScopingFilter"
            location="before-decoration" weight="200">
        <url-pattern>/*</url-pattern>
    </servlet-filter>

    <servlet-filter key="oauth-2lo-authentication" class="com.atlassian.plugin.connect.plugin.module.oauth.OAuth2LOFilter"
            location="after-encoding" weight="2000">
        <url-pattern>/*</url-pattern>
    </servlet-filter>

    <servlet-filter key="servlet-context-thread-local-filter" name="Servlet Context Thread Local Filter"
                    class="com.atlassian.core.filters.ServletContextThreadLocalFilter"
                    location="before-login" weight="100">
        <url-pattern>*</url-pattern>
    </servlet-filter>

    <servlet key="remotablePluginsPermanentRedirectingServlet"
             name="Remotable Plugins Permanent Redirecting Servlet"
             class="com.atlassian.plugin.connect.plugin.module.util.redirect.LegacyAddonRedirectServlet">
        <description>
            Redirects to a Remote App resource, usually an image, with a permanent redirect, but
            doesn't sign the request.  Request parameters are included in the redirect.
        </description>
        <url-pattern>/redirect/permanent</url-pattern>
    </servlet>

    <servlet-filter key="acPermanentRedirectingFilter"
             name="Ac Permanent Redirecting Servlet"
             class="com.atlassian.plugin.connect.plugin.module.util.redirect.RedirectOnNotFoundFilter">
        <description>
            Permanent redirects from old /atlassian-connect/* urls to /ac/*
        </description>
        <init-param>
            <param-name>from.pattern</param-name>
            <param-value>/plugins/servlet/atlassian-connect/</param-value>
        </init-param>
        <init-param>
            <param-name>to.text</param-name>
            <param-value>/plugins/servlet/ac/</param-value>
        </init-param>
        <url-pattern>/plugins/servlet/atlassian-connect/*</url-pattern>
    </servlet-filter>

    <servlet key="addon-iframe-servlet"
             class="com.atlassian.plugin.connect.plugin.iframe.servlet.ConnectIFrameServlet">
        <url-pattern>/ac/*</url-pattern>
    </servlet>

    <servlet key="addon-redirect-servlet"
             class="com.atlassian.plugin.connect.plugin.redirect.RedirectServlet">
        <url-pattern>/ac-redirect/*</url-pattern>
    </servlet>

    <web-panel key="connect-dialog-options" location="atl.header" class="com.atlassian.plugin.connect.plugin.dialog.DialogOptionsWebPanel"/>

    <web-resource key="iframe-host-css">
        <resource type="download" name="core-host.css" location="/css/core/host-css.css" />
        <resource type="download" name="host.css" location="/css/iframe/host.css" />
        <resource type="download" name="admin.css" location="/css/iframe/admin.css" />
        <resource type="download" name="messages-main.css" location="css/messages/main.css" />

        <condition class="com.atlassian.plugin.connect.plugin.module.ConnectAddonsInstalledCondition"/>
    </web-resource>

    <web-resource key="images">
        <resource type="download" name="images/" location="images/" />
    </web-resource>

    <web-resource key="dialog-page-resource">
        <dependency>com.atlassian.auiplugin:ajs</dependency>
    </web-resource>

    <web-resource key="schema-xsl">
        <resource type="download" content-type="application/xml" name="xs3p.xsl" location="/xsd/xs3p.xsl"/>
    </web-resource>

    <applinks-application-type name="Remote Plugin Container" key="remote-plugin-container-type"
                                   class="com.atlassian.plugin.connect.plugin.applinks.RemotePluginContainerApplicationTypeImpl"
                                   interface="com.atlassian.plugin.connect.spi.applinks.RemotePluginContainerApplicationType">
            <manifest-producer class="com.atlassian.plugin.connect.plugin.applinks.RemotePluginContainerManifestProducer"/>
    </applinks-application-type>

    <analytics-whitelist key="analyticsWhitelist" resource="whitelist/connect_whitelist.json"/>

    <listener name="Crowd Sync Listener" key="crowdSyncListener"
              class="com.atlassian.plugin.connect.crowd.usermanagement.ConnectCrowdSyncListener" >
        <description>Handles synchronising of user attributes (which Crowd doesn't do for us yet)</description>
    </listener>

    <ao key="add-on-properties-ao-module" name="Active Objects Module">
        <description>Datastore for add-on properties.</description>
        <entity>com.atlassian.plugin.connect.plugin.ao.AddOnPropertyAO</entity>
    </ao>

</atlassian-plugin>
