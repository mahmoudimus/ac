package com.atlassian.labs.remoteapps.product.confluence;

import com.atlassian.confluence.event.events.content.attachment.AttachmentCreateEvent;
import com.atlassian.confluence.event.events.content.attachment.AttachmentRemoveEvent;
import com.atlassian.confluence.event.events.content.attachment.AttachmentUpdateEvent;
import com.atlassian.confluence.event.events.content.attachment.AttachmentViewEvent;
import com.atlassian.confluence.event.events.content.blogpost.BlogPostCreateEvent;
import com.atlassian.confluence.event.events.content.blogpost.BlogPostRemoveEvent;
import com.atlassian.confluence.event.events.content.blogpost.BlogPostRestoreEvent;
import com.atlassian.confluence.event.events.content.blogpost.BlogPostTrashedEvent;
import com.atlassian.confluence.event.events.content.blogpost.BlogPostUpdateEvent;
import com.atlassian.confluence.event.events.content.blogpost.BlogPostViewEvent;
import com.atlassian.confluence.event.events.content.comment.CommentCreateEvent;
import com.atlassian.confluence.event.events.content.comment.CommentRemoveEvent;
import com.atlassian.confluence.event.events.content.comment.CommentUpdateEvent;
import com.atlassian.confluence.event.events.content.page.PageChildrenReorderEvent;
import com.atlassian.confluence.event.events.content.page.PageCreateEvent;
import com.atlassian.confluence.event.events.content.page.PageMoveEvent;
import com.atlassian.confluence.event.events.content.page.PageRemoveEvent;
import com.atlassian.confluence.event.events.content.page.PageRestoreEvent;
import com.atlassian.confluence.event.events.content.page.PageTrashedEvent;
import com.atlassian.confluence.event.events.content.page.PageUpdateEvent;
import com.atlassian.confluence.event.events.content.page.PageViewEvent;
import com.atlassian.confluence.event.events.follow.FollowEvent;
import com.atlassian.confluence.event.events.group.GroupCreateEvent;
import com.atlassian.confluence.event.events.group.GroupRemoveEvent;
import com.atlassian.confluence.event.events.label.LabelAddEvent;
import com.atlassian.confluence.event.events.label.LabelCreateEvent;
import com.atlassian.confluence.event.events.label.LabelDeleteEvent;
import com.atlassian.confluence.event.events.label.LabelRemoveEvent;
import com.atlassian.confluence.event.events.search.SearchPerformedEvent;
import com.atlassian.confluence.event.events.security.LoginEvent;
import com.atlassian.confluence.event.events.security.LoginFailedEvent;
import com.atlassian.confluence.event.events.security.LogoutEvent;
import com.atlassian.confluence.event.events.space.SpaceCreateEvent;
import com.atlassian.confluence.event.events.space.SpaceLogoUpdateEvent;
import com.atlassian.confluence.event.events.space.SpacePermissionsUpdateEvent;
import com.atlassian.confluence.event.events.space.SpaceRemoveEvent;
import com.atlassian.confluence.event.events.space.SpaceUpdateEvent;
import com.atlassian.confluence.event.events.user.UserCreateEvent;
import com.atlassian.confluence.event.events.user.UserDeactivateEvent;
import com.atlassian.confluence.event.events.user.UserReactivateEvent;
import com.atlassian.confluence.event.events.user.UserRemoveEvent;
import com.atlassian.confluence.event.events.userstatus.StatusClearedEvent;
import com.atlassian.confluence.event.events.userstatus.StatusCreateEvent;
import com.atlassian.confluence.event.events.userstatus.StatusRemoveEvent;
import com.atlassian.event.api.EventListener;
import com.atlassian.event.api.EventPublisher;
import com.atlassian.labs.remoteapps.product.confluence.webhook.ConfluenceEventSerializerFactory;
import com.atlassian.labs.remoteapps.webhook.WebHookPublisher;
import org.springframework.beans.factory.DisposableBean;

/**
 * Converts POJO events generated by Confluence into Remote App web-hooks with a JSON payload.
 */
public class ConfluenceEventHandler implements DisposableBean
{
    private final EventPublisher eventPublisher;
    private final WebHookPublisher webHookPublisher;
    private final ConfluenceEventSerializerFactory eventSerializerFactory;

    public ConfluenceEventHandler(EventPublisher eventPublisher, WebHookPublisher webHookPublisher, ConfluenceEventSerializerFactory eventSerializerFactory)
    {
        this.eventPublisher = eventPublisher;
        this.webHookPublisher = webHookPublisher;
        this.eventSerializerFactory = eventSerializerFactory;
        eventPublisher.register(this);
    }

    @EventListener
    public void onGroupRemoveEvent(GroupRemoveEvent event)
    {
        webHookPublisher.publish("group_removed", eventSerializerFactory.getSerializer(event));
    }

    @EventListener
    public void onGroupCreateEvent(GroupCreateEvent event)
    {
        webHookPublisher.publish("group_created", eventSerializerFactory.getSerializer(event));
    }

    @EventListener
    public void onUserRemoveEvent(UserRemoveEvent event)
    {
        webHookPublisher.publish("user_removed", eventSerializerFactory.getSerializer(event));
    }

    @EventListener
    public void onUserReactivateEvent(UserReactivateEvent event)
    {
        webHookPublisher.publish("user_reactivated", eventSerializerFactory.getSerializer(event));
    }

    @EventListener
    public void onUserDeactivateEvent(UserDeactivateEvent event)
    {
        webHookPublisher.publish("user_deactivated", eventSerializerFactory.getSerializer(event));
    }

    @EventListener
    public void onUserCreateEvent(UserCreateEvent event)
    {
        webHookPublisher.publish("user_created", eventSerializerFactory.getSerializer(event));
    }

    @EventListener
    public void onFollowEvent(FollowEvent event)
    {
        webHookPublisher.publish("user_followed", eventSerializerFactory.getSerializer(event));
    }

    @EventListener
    public void onStatusRemoveEvent(StatusRemoveEvent event)
    {
        webHookPublisher.publish("status_removed", eventSerializerFactory.getSerializer(event));
    }

    @EventListener
    public void onStatusClearedEvent(StatusClearedEvent event)
    {
        webHookPublisher.publish("status_cleared", eventSerializerFactory.getSerializer(event));
    }

    @EventListener
    public void onStatusCreateEvent(StatusCreateEvent event)
    {
        webHookPublisher.publish("status_created", eventSerializerFactory.getSerializer(event));
    }

    @EventListener
    public void onSpacePermissionsUpdateEvent(SpacePermissionsUpdateEvent event)
    {
        webHookPublisher.publish("space_permissions_updated", eventSerializerFactory.getSerializer(event));
    }

    @EventListener
    public void onSpaceRemoveEvent(SpaceRemoveEvent event)
    {
        webHookPublisher.publish("space_removed", eventSerializerFactory.getSerializer(event));
    }

    @EventListener
    public void onSpaceLogoUpdateEvent(SpaceLogoUpdateEvent event)
    {
        webHookPublisher.publish("space_logo_updated", eventSerializerFactory.getSerializer(event));
    }

    @EventListener
    public void onSpaceUpdateEvent(SpaceUpdateEvent event)
    {
        webHookPublisher.publish("spaced_updated", eventSerializerFactory.getSerializer(event));
    }

    @EventListener
    public void onSpaceCreateEvent(SpaceCreateEvent event)
    {
        webHookPublisher.publish("space_created", eventSerializerFactory.getSerializer(event));
    }

    @EventListener
    public void onAttachmentViewEvent(AttachmentViewEvent event)
    {
        webHookPublisher.publish("attachment_viewed", eventSerializerFactory.getSerializer(event));
    }

    @EventListener
    public void onAttachmentRemoveEvent(AttachmentRemoveEvent event)
    {
        webHookPublisher.publish("attachment_removed", eventSerializerFactory.getSerializer(event));
    }

    @EventListener
    public void onAttachmentUpdateEvent(AttachmentUpdateEvent event)
    {
        webHookPublisher.publish("attachment_updated", eventSerializerFactory.getSerializer(event));
    }

    @EventListener
    public void onAttachmentCreateEvent(AttachmentCreateEvent event)
    {
        webHookPublisher.publish("attachment_created", eventSerializerFactory.getSerializer(event));
    }

    @EventListener
    public void onLabelDeleteEvent(LabelDeleteEvent event)
    {
        webHookPublisher.publish("label_deleted", eventSerializerFactory.getSerializer(event));
    }

    @EventListener
    public void onLabelRemoveEvent(LabelRemoveEvent event)
    {
        webHookPublisher.publish("label_removed", eventSerializerFactory.getSerializer(event));
    }

    @EventListener
    public void onLabelAddEvent(LabelAddEvent event)
    {
        webHookPublisher.publish("label_added", eventSerializerFactory.getSerializer(event));
    }

    @EventListener
    public void onLabelCreateEvent(LabelCreateEvent event)
    {
        webHookPublisher.publish("label_created", eventSerializerFactory.getSerializer(event));
    }

    @EventListener
    public void onSearchPerformedEvent(SearchPerformedEvent event)
    {
        webHookPublisher.publish("search_performed", eventSerializerFactory.getSerializer(event));
    }

    @EventListener
    public void onCommentRemoveEvent(CommentRemoveEvent event)
    {
        webHookPublisher.publish("comment_removed", eventSerializerFactory.getSerializer(event));
    }

    @EventListener
    public void onCommentUpdateEvent(CommentUpdateEvent event)
    {
        webHookPublisher.publish("comment_updated", eventSerializerFactory.getSerializer(event));
    }

    @EventListener
    public void onCommentCreateEvent(CommentCreateEvent event)
    {
        webHookPublisher.publish("comment_created", eventSerializerFactory.getSerializer(event));
    }

    @EventListener
    public void onLoginFailedEvent(LoginFailedEvent event)
    {
        webHookPublisher.publish("login_failed", eventSerializerFactory.getSerializer(event));
    }

    @EventListener
    public void onLogoutEvent(LogoutEvent event)
    {
        webHookPublisher.publish("logout", eventSerializerFactory.getSerializer(event));
    }

    @EventListener
    public void onLoginEvent(LoginEvent event)
    {
        webHookPublisher.publish("login", eventSerializerFactory.getSerializer(event));
    }

    @EventListener
    public void onBlogPostCreateEvent(BlogPostCreateEvent event)
    {
        webHookPublisher.publish("blog_created", eventSerializerFactory.getSerializer(event));
    }

    @EventListener
    public void onBlogPostRemoveEvent(BlogPostRemoveEvent event)
    {
        webHookPublisher.publish("blog_removed", eventSerializerFactory.getSerializer(event));
    }

    @EventListener
    public void onBlogPostTrashedEvent(BlogPostTrashedEvent event)
    {
        webHookPublisher.publish("blog_trashed", eventSerializerFactory.getSerializer(event));
    }

    @EventListener
    public void onBlogPostRestoreEvent(BlogPostRestoreEvent event)
    {
        webHookPublisher.publish("blog_restored", eventSerializerFactory.getSerializer(event));
    }

    @EventListener
    public void onBlogPostUpdateEvent(BlogPostUpdateEvent event)
    {
        webHookPublisher.publish("blog_updated", eventSerializerFactory.getSerializer(event));
    }

    @EventListener
    public void onBlogPostViewEvent(BlogPostViewEvent event)
    {
        webHookPublisher.publish("blog_viewed", eventSerializerFactory.getSerializer(event));
    }

    @EventListener
    public void onPageUpdateEvent(PageUpdateEvent event)
    {
        webHookPublisher.publish("page_updated", eventSerializerFactory.getSerializer(event));
    }

    @EventListener
    public void onPageCreateEvent(PageCreateEvent event)
    {
        webHookPublisher.publish("page_created", eventSerializerFactory.getSerializer(event));
    }

    @EventListener
    public void onPageRemoveEvent(PageRemoveEvent event)
    {
        webHookPublisher.publish("page_removed", eventSerializerFactory.getSerializer(event));
    }

    @EventListener
    public void onPageTrashedEvent(PageTrashedEvent event)
    {
        webHookPublisher.publish("page_trashed", eventSerializerFactory.getSerializer(event));
    }

    @EventListener
    public void onPageRestoreEvent(PageRestoreEvent event)
    {
        webHookPublisher.publish("page_restored", eventSerializerFactory.getSerializer(event));
    }

    @EventListener
    public void onPageMoveEvent(PageMoveEvent event)
    {
        webHookPublisher.publish("page_moved", eventSerializerFactory.getSerializer(event));
    }

    @EventListener
    public void onPageViewEvent(PageViewEvent event)
    {
        webHookPublisher.publish("page_viewed", eventSerializerFactory.getSerializer(event));
    }

    @EventListener
    public void onPageChildrenReorderEvent(PageChildrenReorderEvent event)
    {
        webHookPublisher.publish("page_children_reordered", eventSerializerFactory.getSerializer(event));
    }

    @Override
    public void destroy() throws Exception
    {
        eventPublisher.unregister(this);
    }
}
