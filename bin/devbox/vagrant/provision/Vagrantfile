# -*- mode: ruby -*-
# vi: set ft=ruby :

VAGRANTFILE_API_VERSION = "2"

Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|

  # Every Vagrant virtual environment requires a box to build off of.
  config.vm.box='hashicorp/precise32'

  #config.vm.network "forwarded_port", guest: 3000, host: 3000
  #config.vm.network "forwarded_port", guest: 8000, host: 8000
  #config.vm.network "forwarded_port", guest: 2990, host: 2990
  #config.vm.network "forwarded_port", guest: 1990, host: 1990

  # Required for NFS to work, pick any local IP
  #config.vm.network "private_network", ip: "192.168.50.50"
  # Use NFS for shared folders for better performance
  #config.vm.synced_folder ".", "/vagrant", type: "nfs"
  
  
  config.vm.provider "virtualbox" do |v|
    host = RbConfig::CONFIG['host_os']

    # Give VM 1/2 system memory & access to all cpu cores on the host
    if host =~ /darwin/
      cpus = `sysctl -n hw.ncpu`.to_i
      # sysctl returns Bytes and we need to convert to MB
      mem = `sysctl -n hw.memsize`.to_i / 1024 / 1024 / 2
    elsif host =~ /linux/
      cpus = `nproc`.to_i
      # meminfo shows KB and we need to convert to MB
      mem = `grep 'MemTotal' /proc/meminfo | sed -e 's/MemTotal://' -e 's/ kB//'`.to_i / 1024 / 2
    else # sorry Windows folks, I can't help you
      cpus = 2
      mem = 1024
    end

    v.customize ["modifyvm", :id, "--memory", mem]
    v.customize ["modifyvm", :id, "--cpus", cpus]
    v.customize ["modifyvm", :id, "--natdnshostresolver1", "on"]
    v.customize ["modifyvm", :id, "--natdnsproxy1", "on"]
  end


  # install Node
  config.vm.provision "shell",
    inline: "sudo apt-get install -y git curl build-essential libssl-dev
            curl https://raw.githubusercontent.com/creationix/nvm/v0.7.0/install.sh | sh
            sudo -s
            source /root/.profile
            nvm install 0.10.32
            n=$(which node);n=${n%/bin/node}; chmod -R 755 $n/bin/*; sudo cp -r $n/{bin,lib,share} /usr/local"

  #install node.js modules
  config.vm.provision "shell",
    inline: "sudo npm install -g grunt-cli
            sudo npm install -g firebase-tools
            sudo npm install -g http-server
            npm i -g atlas-connect"

  #install Java
  config.vm.provision "shell",
    inline: "mkdir -p /etc/puppet/modules;
            puppet module install puppetlabs/nodejs;
            puppet module install puppetlabs/apache"
  config.vm.provision :puppet

  #install Atlassian Plugin SDK
  config.vm.provision "shell",
    inline: "sudo apt-get update
            sudo sh -c \"echo 'deb https://sdkrepo.atlassian.com/debian/ stable contrib' >>/etc/apt/sources.list\"
            sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys B07804338C015B73
            sudo apt-get install -Y apt-transport-https
            sudo apt-get update
            sudo apt-get install atlassian-plugin-sdk"

  #install Connect scripts
  config.vm.provision "shell",
    inline: "su -c \"source /vagrant/scripts/install-connect-scripts.sh\" vagrant"

  #start atlas-run-connect to download all artifacts
  config.vm.provision "shell",
    inline: "su -c \"source /vagrant/scripts/download-amps.sh\" vagrant"

  #free space
  config.vm.provision "shell",
    path: "scripts/free-space.sh"

  config.vm.provision "shell",
    inline: "echo 'OK'"

end
